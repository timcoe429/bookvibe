# BookVibe Project Document

## Project Overview
BookVibe is a mobile-first book discovery app that helps users pick their next read from their personal TBR (To Be Read) pile. The app features a Tinder-style swiping interface with mood-based filtering to match books to user preferences.

## Tech Stack
- **Frontend**: React 18, Tailwind CSS
- **Backend**: Node.js, Express.js
- **Database**: PostgreSQL with Sequelize ORM
- **Deployment**: Railway with Docker
- **APIs**: Google Vision API, Goodreads API, Google Books API, Open Library API
- **AI Vision**: Google Cloud Vision API for book spine text recognition
- **Styling**: Tailwind CSS with custom gradients and responsive design

## Recent Work (Latest Updates - December 2024)

### üöÄ MAJOR PIVOT COMPLETED (December 2024)

#### **HARD PIVOT**: Complete Design Overhaul
- **OLD**: Complex UI with custom CSS animations, glassmorphism, water magic buttons
- **NEW**: Clean, mobile-first Tinder-style interface with Tailwind CSS
- **REASON**: Original design was too complex and not mobile-optimized

#### 1. **New Mobile-First Design**
   - **Tinder-Style Swiping**: Heart ‚ù§Ô∏è to save, X to skip books
   - **Mood-Based Filtering**: 6 beautiful mood categories with icons
     - Cozy (Coffee icon) - Amber theme
     - Thrilling (Zap icon) - Red theme  
     - Romantic (Heart icon) - Pink theme
     - Dark (Moon icon) - Purple theme
     - Uplifting (Sun icon) - Yellow theme
     - Literary (BookOpen icon) - Blue theme
   - **Beautiful Book Cards**: Gradient backgrounds with metadata
   - **Mobile-Optimized**: Responsive design, touch-friendly interactions
   - **Clean Typography**: Modern font hierarchy

#### 2. **Tailwind CSS Implementation**
   - **Added Dependencies**: tailwindcss, postcss, autoprefixer to client/package.json
   - **Configuration Files**: 
     - `client/tailwind.config.js` - Scans "./src/**/*.{js,jsx,ts,tsx}"
     - `client/postcss.config.js` - Processes Tailwind directives
   - **CSS Setup**: `client/src/index.css` with @tailwind directives
   - **Fixed Config Location**: Moved from root to client directory (critical fix)

#### 3. **Complete App.jsx Rewrite**
   - **Component Structure**: BookPickerApp with HomeScreen and SwipeScreen
   - **Sample Books**: 3 diverse books with rich metadata:
     - "The Seven Husbands of Evelyn Hugo" (Pink/Purple gradient)
     - "Mexican Gothic" (Emerald/Gray gradient)  
     - "Beach Read" (Yellow/Orange gradient)
   - **State Management**: currentView and currentBook state
   - **Navigation**: Clean view switching between home and swipe screens

#### 4. **PWA Optimizations**
   - **Updated HTML Meta Tags**: Mobile-optimized, proper descriptions
   - **New Manifest**: client/public/manifest.json with proper PWA config
   - **Theme Colors**: Purple (#8b5cf6) and pink (#ec4899) gradient theme
   - **Loading Screen**: Updated to match new brand colors
   - **Removed Service Worker**: Eliminated registration errors

#### 5. **Technical Fixes**
   - **File Structure**: Proper separation of concerns
   - **Import Management**: Fixed CSS imports in index.js
   - **Removed Old Files**: Deleted complex App.css with animations
   - **Railway Compatibility**: Ensured all configs work with Railway deployment

### ‚úÖ CURRENT FEATURES WORKING

#### **Home Screen**
- Beautiful gradient background (purple to pink)
- BookVibe branding with gradient text
- "Pick from your TBR pile ‚ú®" tagline
- Library count indicator (üìö 47 books)
- 6 mood selector buttons in 3x2 grid
- Quick action buttons:
  - üé≤ Pick My Next Read! (primary CTA)
  - üìö Browse My Library (47)
  - ‚ûï Add New Books

#### **Swipe Screen**  
- Back navigation to home
- Large book cards with:
  - Gradient backgrounds matching book mood
  - Book vibe text (e.g., "‚ú® Drama Queen Energy")
  - Title and author
  - Read time and star rating
  - Genre and mood tags
- Swipe actions:
  - X button (skip/pass)
  - Heart button (save to reading list)
- User guidance text
- Smooth card transitions

#### **Technical Infrastructure**
- Mobile-responsive (max-w-sm container)
- Touch-friendly button sizes
- Gradient themes throughout
- Tailwind utility classes
- Clean component structure

### üîß CURRENT STATUS: Styling Fixed, Ready for Backend Integration

#### **Tailwind CSS**: ‚úÖ WORKING
- Configuration files in correct location (client directory)
- Proper content paths configured
- Gradients and responsive design rendering correctly
- No more unstyled components

#### **Next Integration Points**:
1. **Connect to existing photo upload system**
2. **Integrate with Google Vision AI book detection**  
3. **Add real user library data**
4. **Connect mood filtering to backend book database**

### üìã IMMEDIATE NEXT STEPS
1. **Connect new UI to existing photo upload backend**
2. **Add real book data from user's library**
3. **Implement actual swipe functionality** 
4. **Connect mood filters to book recommendation API**
5. **Test full user flow**: Photo ‚Üí AI Detection ‚Üí Library ‚Üí Mood Filtering ‚Üí Swiping

### üéØ NEW APP STRUCTURE

#### **Two Main Views**:
```
BookPickerApp
‚îú‚îÄ‚îÄ HomeScreen (currentView === 'home')
‚îÇ   ‚îú‚îÄ‚îÄ Header (BookVibe branding)
‚îÇ   ‚îú‚îÄ‚îÄ Mood Selector (6 categories)
‚îÇ   ‚îî‚îÄ‚îÄ Quick Actions (3 buttons)
‚îî‚îÄ‚îÄ SwipeScreen (currentView === 'swipe')
    ‚îú‚îÄ‚îÄ Navigation (back button)
    ‚îú‚îÄ‚îÄ Book Card (gradient, metadata)
    ‚îî‚îÄ‚îÄ Swipe Actions (X and Heart)
```

#### **Sample Books Data Structure**:
```javascript
{
  title: "Book Title",
  author: "Author Name", 
  cover: "bg-gradient-to-b from-pink-400 to-purple-600",
  genre: "Genre",
  mood: "Mood Description",
  readTime: "X.X hours",
  rating: 4.8,
  vibe: "‚ú® Vibe Description"
}
```

### üöß INTEGRATION NEEDED
üîß **Photo Upload Integration** - Connect new UI to existing backend
üîß **Real Book Data** - Replace sample books with user library
üîß **Mood Filtering** - Connect mood buttons to book queries
üîß **Swipe Actions** - Implement save/skip functionality
üîß **Google Vision AI** - Maintain existing book detection features

## Important Notes
- **MOBILE-FIRST DESIGN** - Optimized for phone screens
- **RAILWAY DEPLOYMENT ONLY** - No local development  
- **Tailwind CSS** - All styling through utility classes
- **Tinder-Style UX** - Familiar swiping pattern for book discovery
- **Configuration Files** - Must be in client/ directory for Railway builds

## Current Database Schema (Unchanged)
- Users table (basic user management)
- Books table (book metadata) 
- UserBooks table (user's personal library)
- Supports PostgreSQL with Sequelize ORM

## API Endpoints (Ready for Integration)
- `GET /api/books/recommendations?mood=romance&limit=3` - Get mood-based recommendations
- `POST /api/photos/upload` - Upload photo for AI book detection
- `POST /api/photos/confirm-books` - Confirm and add detected books to library
- `GET /api/photos/upload-info` - Get photo tips and recommendations
- `GET /health` - Health check endpoint

## Current Priority
üé® **COMPLETED**: Mobile-first UI with Tailwind CSS
üîó **IMMEDIATE**: Connect new UI to existing backend systems
üì± **NEXT**: Implement actual swiping and book management features
ü§ñ **FUTURE**: Enhanced AI recommendations and book metadata 
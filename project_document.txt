# BookVibe Project Documentation

## Project Overview
BookVibe is an AI-powered book recommendation app for avid readers that allows users to:
- Upload photos of their bookshelves to automatically detect and catalog books
- Get personalized book recommendations based on mood and reading preferences
- Track reading progress and statistics
- Connect with Goodreads for additional data

## Tech Stack
- **Frontend**: React 18, Tailwind CSS, React Router, Axios
- **Backend**: Node.js, Express, Sequelize ORM
- **Database**: PostgreSQL (hosted on Railway)
- **APIs**: Google Vision API, Goodreads API, Google Books API, Open Library API
- **Deployment**: Railway (containerized with Docker)

## Current Database Info
```
postgresql://postgres:ytxhlODolZJKemBrAonuwpymtgPQnoZQ@turntable.proxy.rlwy.net:33827/railway
```

## Project Structure
```
bookvibe/
â”œâ”€â”€ client/                 # React frontend
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ components/     # BookCard, MoodSelector, PhotoUpload
â”‚   â”‚   â”œâ”€â”€ pages/         # Home, PhotoCapture, Settings
â”‚   â”‚   â””â”€â”€ services/      # API client, book service
â”‚   â””â”€â”€ package.json
â”œâ”€â”€ server/                # Node.js backend
â”‚   â”œâ”€â”€ config/           # Database and environment config
â”‚   â”œâ”€â”€ controllers/      # Route handlers
â”‚   â”œâ”€â”€ middleware/       # Auth and upload middleware
â”‚   â”œâ”€â”€ models/          # Sequelize models (User, Book, UserBook)
â”‚   â”œâ”€â”€ routes/          # API routes (books, users, photos)
â”‚   â”œâ”€â”€ services/        # External API integrations
â”‚   â”œâ”€â”€ migrations/      # Database schema
â”‚   â””â”€â”€ scripts/         # Migration and utility scripts
â”œâ”€â”€ Dockerfile           # Multi-stage Docker build
â”œâ”€â”€ railway.json         # Railway deployment config
â””â”€â”€ .dockerignore       # Docker build optimization
```

## Recent Work Completed (Latest Session)

### Issues Identified and Fixed:
1. **Docker Build Failure**: 
   - Error: `npm run build` failing with exit code 127
   - Root cause: Missing `@tailwindcss/forms` dependency
   - âœ… FIXED: Added missing dependency to client/package.json

2. **Health Check Failures**:
   - Service repeatedly failing health checks on Railway
   - Root cause: Multiple server setup issues
   - âœ… FIXED: Resolved database model mapping and server configuration

3. **Database Model Issues**:
   - Models not matching database schema (camelCase vs snake_case)
   - âœ… FIXED: Updated all models with proper field mappings:
     - User.js: Added field mappings for session_id, goodreads_user_id
     - Book.js: Added field mappings for goodreads_id, cover_url, etc.
     - UserBook.js: Added field mappings for user_id, book_id, date fields

4. **Server Configuration**:
   - Duplicate Express app setup causing conflicts
   - âœ… FIXED: Made server.js use existing app.js properly

5. **Database Migration**:
   - No automated way to set up database schema
   - âœ… FIXED: Created migration script that runs before server start

6. **Missing Dependencies**:
   - API calls using unavailable `fetch` instead of `axios`
   - âœ… FIXED: Updated photo routes to use axios consistently

### Files Modified:
- `client/package.json`: Added @tailwindcss/forms dependency
- `Dockerfile`: Updated to run migration before server start
- `server/models/User.js`: Added field mappings and table configuration
- `server/models/Book.js`: Added field mappings and table configuration  
- `server/models/UserBook.js`: Added field mappings and table configuration
- `server/server.js`: Fixed to use existing app.js properly
- `server/scripts/migrate.js`: Created database migration script
- `server/routes/photos.js`: Fixed axios usage instead of fetch
- `railway.json`: Added Railway deployment configuration
- `.dockerignore`: Created for optimized builds

## Current Status: âœ… READY FOR DEPLOYMENT

### What's Working:
- âœ… Docker build process (fixed Tailwind dependency)
- âœ… Database models properly mapped to schema
- âœ… Server startup and health check endpoints
- âœ… Database migration automation
- âœ… Multi-stage Docker build for client + server
- âœ… Railway deployment configuration

### Environment Variables Required:
```
# Required for basic functionality
DATABASE_URL=postgresql://postgres:ytxhlODolZJKemBrAonuwpymtgPQnoZQ@turntable.proxy.rlwy.net:33827/railway
NODE_ENV=production
PORT=5000

# Optional (for full feature functionality)
GOOGLE_VISION_API_KEY=your_key_here
GOODREADS_API_KEY=your_key_here
JWT_SECRET=your_secure_random_string_here
```

## Next Steps / TODO:

### Immediate (Deployment):
1. **Deploy to Railway**: Push current changes to trigger deployment
2. **Verify Health**: Confirm health checks pass and app starts successfully
3. **Test Basic Endpoints**: Verify API endpoints respond correctly

### Short Term (Core Features):
1. **API Keys Setup**: Get and configure Google Vision API key for photo processing
2. **Frontend Testing**: Test React app functionality once backend is live
3. **Database Population**: Add sample books for testing recommendations
4. **Error Handling**: Improve error messages and fallback behaviors

### Medium Term (Feature Completion):
1. **Authentication**: Implement proper user authentication (currently uses session IDs)
2. **Goodreads Integration**: Complete Goodreads API integration for book imports
3. **Photo Processing**: Test and refine book detection from photos
4. **Recommendation Engine**: Enhance mood-based recommendation algorithm
5. **User Experience**: Polish frontend UI/UX

### Long Term (Polish & Scale):
1. **Performance**: Optimize API response times and database queries
2. **Testing**: Add comprehensive test suite
3. **Monitoring**: Add logging and error tracking
4. **Mobile**: Consider responsive design improvements
5. **Features**: Reading streaks, social features, book clubs

## Database Schema Overview:
- **users**: User sessions, preferences, and reading stats
- **books**: Master catalog with titles, authors, metadata, and mood classifications
- **user_books**: Junction table linking users to books with reading status and dates

## API Endpoints Available:
- `GET /health`: Health check
- `GET /api/users/session/:sessionId`: Get/create user
- `GET /api/books/recommendations`: Get mood-based recommendations  
- `POST /api/photos/upload`: Process bookshelf photos
- `POST /api/books/bulk-import`: Import multiple books to user library

## Known Limitations:
1. **Google Vision API**: Requires API key for photo processing
2. **Goodreads API**: Limited due to API restrictions (may need alternatives)
3. **Rate Limiting**: External API calls may need additional throttling
4. **Mobile Support**: Not optimized for mobile photo capture yet

## Deployment Commands:
```bash
# To deploy to Railway:
git add .
git commit -m "Deploy fixes and improvements"
git push origin main
```

## Important Notes:
- **This project does NOT run locally** - it's designed specifically for Railway deployment
- All development and testing happens through Railway's cloud environment
- The database is hosted on Railway and not accessible for local development
- Use Railway's deployment logs and live environment for debugging and testing

## Last Updated: July 24, 2024

### Latest Issues Fixed:
- **Syntax Error in GoogleVisionService**: 
  - Error: `SyntaxError: Unexpected end of input` at line 141
  - Root cause: Incomplete/corrupted googleVisionService.js file
  - âœ… FIXED: Completed the missing code and proper module export

- **Health Check 404 Errors**: 
  - Error: Health checks failing with "Route not found" 404s
  - Root cause: Duplicate health check endpoints causing routing conflicts
  - âœ… FIXED: Simplified to single /health endpoint, added request logging

## BREAKTHROUGH - Basic App Working! âœ…

### Port Configuration Issue SOLVED:
- **Problem**: Railway was setting PORT to 8080 internally, but our configs were mismatched
- **Solution**: Set Railway PORT environment variable to 8080, use process.env.PORT in server
- âœ… **RESULT**: Minimal server now responds successfully with JSON!

### Current Status:
- âœ… **Server deployed and working** - Returns JSON responses
- âœ… **Basic API endpoint functional** - `/` returns success message  
- âœ… **Railway deployment process working** - No more crashes or 502 errors
- ðŸš§ **Next**: Build out the actual BookVibe features on this working foundation

Status: **BASIC APP WORKING** - Ready to build BookVibe features on working server! 
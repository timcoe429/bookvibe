# BookVibe Project Document

## Project Overview
BookVibe is an AI-powered book recommendation app that suggests books based on user mood. The app uses photo analysis to detect books from bookshelf images and provides personalized reading recommendations.

## Tech Stack
- **Frontend**: React 18, Tailwind CSS
- **Backend**: Node.js, Express.js
- **Database**: PostgreSQL with Sequelize ORM
- **Deployment**: Railway with Docker
- **APIs**: Google Vision API, Goodreads API, Google Books API, Open Library API

## Recent Work (July 24, 2025)

### âœ… COMPLETED
1. **Docker Build Issues Fixed**
   - Resolved `exit code: 127` error by adding missing `@tailwindcss/forms` dependency
   - Created multi-stage Dockerfile for client and server builds
   - Fixed port configuration issues (Railway PORT vs Dockerfile EXPOSE)

2. **Server Startup Issues Resolved**
   - Fixed database model mismatches (camelCase vs snake_case)
   - Resolved duplicate Express app setup
   - Added automated database migration script
   - Fixed API calls using axios instead of fetch

3. **Railway Deployment Working**
   - Server successfully starts and responds to health checks
   - API endpoints returning proper JSON data
   - Port configuration aligned (Railway PORT: 8080, Dockerfile EXPOSE: 3000)

4. **React Frontend Created**
   - Beautiful mood selector with emojis and colors
   - Book cards with covers, ratings, and descriptions
   - Responsive design with loading states
   - API integration for book recommendations

### ðŸ”§ CURRENT ISSUE: React Frontend Not Loading
**Problem**: White page after loading screen, console shows JavaScript files being served as HTML
**Root Cause**: Server not properly serving static React build files
**Debugging Steps**:
1. Added static file serving middleware to minimal-server.js
2. Removed proxy configuration from client/package.json
3. Added debugging logs to check if public directory exists and contains files
4. Updated catch-all route to properly serve React app

### ðŸ“‹ NEXT STEPS
1. **Deploy current changes** and check server logs for public directory debugging
2. **Verify React build** is being created and copied correctly
3. **Test frontend functionality** once static files are served properly
4. **Add more features** once basic app is working

## Important Notes
- **DOES NOT RUN LOCALLY** - This is a Railway-only deployment
- Database URL: postgresql://postgres:ytxhlODolZJKemBrAonuwpymtgPQnoZQ@turntable.proxy.rlwy.net:33827/railway
- Railway automatically sets PORT environment variable (currently 8080)
- Dockerfile uses multi-stage build: client build â†’ server setup â†’ copy built client to public/

## API Endpoints
- `GET /api/books/recommendations?mood=escapist&limit=3` - Get book recommendations
- `GET /health` - Health check endpoint
- All other routes serve React app

## Current Status
ðŸš§ **DEBUGGING**: React frontend static file serving issue
âœ… **WORKING**: Backend API, database, Railway deployment 